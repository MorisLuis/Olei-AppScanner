# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

pre_install do |installer|
  Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_static_framework_transitive_dependencies) {}

  installer.pod_targets.each do |pod|
    if pod.name.eql?('RNPermissions') || pod.name.start_with?('Permission-')
      def pod.build_type;
        Pod::BuildType.static_library
      end
    end
  end
end

target 'OleiApp' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  pod 'RNCPicker', :path => '../node_modules/@react-native-picker/picker'

  target 'OleiAppTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # Definición de la función find_and_replace
    def find_and_replace(dir, findstr, replacestr)
      Dir[dir].each do |name|
        text = File.read(name)
        replace = text.gsub(findstr,replacestr)
        if text != replace
          puts "Fix: " + name
          File.open(name, "w") { |file| file.puts replace }
          STDOUT.flush
        end
      end
      Dir[dir + '*/'].each(&method(:find_and_replace))
    end

    # Uso de find_and_replace para reemplazar cadenas en archivos específicos
    find_and_replace("./node_modules/react-native/React/Base/RCTKeyCommands.m",
                     "_modifierFlags",
                     "_modifierEventFlags")
    find_and_replace("./node_modules/react-native/React/Base/RCTKeyCommands.m",
                     "_modifiedInput",
                     "_modifiedEventInput")
    find_and_replace("./node_modules/react-native/React/Base/RCTKeyCommands.m",
                     "_isKeyDown",
                     "_isKeyEventDown")
    find_and_replace("./node_modules/react-native/React/DevSupport/RCTPackagerClient.h",
                     "handleNotification",
                     "handlePackageNotification")

    find_and_replace("./node_modules/react-native/React/DevSupport/RCTPackagerConnection.mm",
                     "handleNotification",
                     "handlePackageNotification")
  end

  pod 'SVProgressHUD', '~> 2.2.5'
  pod 'SwiftEntryKit', '1.2.3'
end
